/* 1)Given an integer array nums, find the subarray with the largest sum, and return its sum.
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The subarray [4,-1,2,1] has the largest sum 6.*/
#include <stdio.h>

int maxSubArray(int* nums, int numsSize) {
    int max_current = nums[0];
    int max_global = nums[0];

    for (int i = 1; i < numsSize; i++) {
        max_current = (nums[i] > max_current + nums[i]) ? nums[i] : max_current + nums[i];
        if (max_current > max_global) {
            max_global = max_current;
        }
    }

    return max_global;
}

int main() {
    int nums[] = {-2, 1, -3, 4, -1, 2, 1, -5, 4};
    int size = sizeof(nums) / sizeof(nums[0]);
    int result = maxSubArray(nums, size);
    printf("Maximum subarray sum: %d\n", result);  // Output: 6
    return 0;
}
/*2) Given an integer array arr[] of size n, the task is to find the count inversions of the given array.
 Two array elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.
 Input: arr[] = {7, 2, 6, 3}
 Output: 4
 Explanation: Given array has 4 inversions: (7, 2), (7, 6), (7, 3), (6, 3)*/
 #include <stdio.h>

int merge(int arr[], int left, int mid, int right) {
    int i, j, k;
    int count = 0;
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[left + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    i = 0;
    j = 0;
    k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
            count += (n1 - i);  // Count inversions
        }
    }

    while (i < n1)
        arr[k++] = L[i++];

    while (j < n2)
        arr[k++] = R[j++];

    return count;
}

int mergeSortAndCount(int arr[], int left, int right) {
    int count = 0;
    if (left < right) {
        int mid = left + (right - left) / 2;

        count += mergeSortAndCount(arr, left, mid);
        count += mergeSortAndCount(arr, mid + 1, right);
        count += merge(arr, left, mid, right);
    }
    return count;
}

int countInversions(int arr[], int n) {
    return mergeSortAndCount(arr, 0, n - 1);
}

int main() {
    int arr[] = {7, 2, 6, 3};
    int n = sizeof(arr) / sizeof(arr[0]);
    int result = countInversions(arr, n);
    printf("Number of inversions: %d\n", result);  // Output: 4
    return 0;
}
/*  3)Given an integer array nums and an integer k, return the kth largest element in the array.
 Note that it is the kth largest element in the sorted order, not the kth distinct element.
 Solve it without sorting.
 Example:
 Input: nums = [3,2,1,5,6,4], k = 2
 Output: 5*/
 #include <stdio.h>
#include <stdlib.h>

typedef struct {
    int* data;
    int size;
    int capacity;
} MinHeap;

MinHeap* createMinHeap(int capacity) {
    MinHeap* heap = (MinHeap*)malloc(sizeof(MinHeap));
    heap->data = (int*)malloc(capacity * sizeof(int));
    heap->size = 0;
    heap->capacity = capacity;
    return heap;
}

void swap(int* a, int* b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heapifyUp(MinHeap* heap, int index) {
    while (index > 0 && heap->data[(index - 1) / 2] > heap->data[index]) {
        swap(&heap->data[(index - 1) / 2], &heap->data[index]);
        index = (index - 1) / 2;
    }
}

void heapifyDown(MinHeap* heap, int index) {
    int smallest = index;
    int left = 2 * index + 1;
    int right = 2 * index + 2;

    if (left < heap->size && heap->data[left] < heap->data[smallest])
        smallest = left;
    if (right < heap->size && heap->data[right] < heap->data[smallest])
        smallest = right;
    if (smallest != index) {
        swap(&heap->data[index], &heap->data[smallest]);
        heapifyDown(heap, smallest);
    }
}

void insertMinHeap(MinHeap* heap, int value) {
    if (heap->size < heap->capacity) {
        heap->data[heap->size++] = value;
        heapifyUp(heap, heap->size - 1);
    } else if (value > heap->data[0]) {
        heap->data[0] = value;
        heapifyDown(heap, 0);
    }
}

int findKthLargest(int* nums, int numsSize, int k) {
    MinHeap* heap = createMinHeap(k);
    for (int i = 0; i < numsSize; i++) {
        insertMinHeap(heap, nums[i]);
    }
    int result = heap->data[0]; // The root of the min-heap is the kth largest
    free(heap->data);
    free(heap);
    return result;
}

int main() {
    int nums[] = {3, 2, 1, 5, 6, 4};
    int k = 2;
    int result = findKthLargest(nums, sizeof(nums) / sizeof(nums[0]), k);
    printf("The %dth largest element is: %d\n", k, result);  // Output: 5
    return 0;
}
/* 4)A phrase is a palindrome if, after converting all uppercase letters into lowercase letters and
 removing all non-alphanumeric characters, it reads the same forward and backward.
 Alphanumeric characters include letters and numbers.*/
#include <stdio.h>
#include <ctype.h>
#include <string.h>

int isPalindrome(char* s) {
    char filtered[1000]; // Buffer for the normalized string
    int j = 0;

    // Normalize the input string
    for (int i = 0; s[i] != '\0'; i++) {
        if (isalnum(s[i])) {
            filtered[j++] = tolower(s[i]); // Convert to lowercase and store
        }
    }
    filtered[j] = '\0'; // Null-terminate the filtered string

    // Check if the filtered string is a palindrome
    int left = 0, right = j - 1;
    while (left < right) {
        if (filtered[left] != filtered[right]) {
            return 0; // Not a palindrome
        }
        left++;
        right--;
    }
    return 1; // Is a palindrome
}

int main() {
    char phrase[] = "A man, a plan, a canal: Panama";
    if (isPalindrome(phrase)) {
        printf("The phrase is a palindrome.\n");
    } else {
        printf("The phrase is not a palindrome.\n");
    }
    return 0;
}
/* 5 Given an array arr[] of size n, return an equilibrium index (if any) or -1 if no equilibrium index
exists. The equilibrium index of an array is an index such that the sum of elements at lower
indexes equals the sum of elements at higher indexes.
Note: Return equilibrium point in 1-based indexing. Return -1 if no such point exists.*/
#include <stdio.h>

int findEquilibriumIndex(int arr[], int n) {
    int total_sum = 0, left_sum = 0;

    // Calculate the total sum of the array
    for (int i = 0; i < n; i++) {
        total_sum += arr[i];
    }

    // Check for equilibrium index
    for (int i = 0; i < n; i++) {
        total_sum -= arr[i];  // Right sum is total_sum minus current element
        if (left_sum == total_sum) {
            return i + 1;  // 1-based index
        }
        left_sum += arr[i];  // Update left sum
    }

    return -1;  // No equilibrium index found
}

int main() {
    int arr[] = {-7, 1, 5, 2, -4, 3, 0};
    int n = sizeof(arr) / sizeof(arr[0]);
    printf("Equilibrium index: %d\n", findEquilibriumIndex(arr, n));  // Output: 4
    return 0;
}
/* 6 Given a sorted array A (sorted in ascending order), having N integers, find if there exists any
pair of elements (A[i], A[j]) such that their sum is equal to X.
a)Using Naive Approach
b)Using Two Pointer Technique
Input: A = [1, 2, 4, 5, 7, 11]
N = 6
X = 9*/
#include <stdio.h>

int findPairNaive(int A[], int N, int X) {
    // Check all pairs using two loops
    for (int i = 0; i < N; i++) {
        for (int j = i + 1; j < N; j++) {
            if (A[i] + A[j] == X) {
                return 1; // Pair found
            }
        }
    }
    return 0; // No pair found
}

int main() {
    int A[] = {1, 2, 4, 5, 7, 11};
    int N = sizeof(A) / sizeof(A[0]);
    int X = 9;
    if (findPairNaive(A, N, X)) {
        printf("Yes\n"); // Pair exists
    } else {
        printf("No\n"); // No pair exists
    }
    return 0;
}
/* 7 Given two strings s1 and s2 consisting of lowercase characters, the task is to check whether the
two given strings are anagrams of each other or not. An anagram of a string is another string that
contains the same characters, only the order of characters can be different. For example, “act” and
“tac” are anagrams of each other.*/
#include <stdio.h>
#include <string.h>

int areAnagrams(char s1[], char s2[]) {
    // If lengths are different, they cannot be anagrams
    if (strlen(s1) != strlen(s2)) {
        return 0; // Not anagrams
    }

    // Create an array to store frequency of characters (assuming lowercase letters)
    int freq[26] = {0};

    // Count frequency of characters in both strings
    for (int i = 0; s1[i] != '\0'; i++) {
        freq[s1[i] - 'a']++; // Increment count for character in s1
        freq[s2[i] - 'a']--; // Decrement count for character in s2
    }

    // If all counts are zero, they are anagrams
    for (int i = 0; i < 26; i++) {
        if (freq[i] != 0) {
            return 0; // Not anagrams
        }
    }

    return 1; // Anagrams
}

int main() {
    char s1[] = "act";
    char s2[] = "tac";

    if (areAnagrams(s1, s2)) {
        printf("Yes\n"); // Strings are anagrams
    } else {
        printf("No\n"); // Strings are not anagrams
    }

    return 0;
}
/* 8 Given an array of integers of size ‘n’, Our aim is to calculate the maximum sum of ‘k’
consecutive elements in the array(Using Sliding Window Technique)
Input : arr[] = {100, 200, 300, 400}, k = 2
Output : 700
Input : arr[] = {1, 4, 2, 10, 23, 3, 1, 0, 20}, k = 4
Output : 39
We get maximum sum by adding subarray {4, 2, 10, 23} of size 4. code in c language and it is easy and simple and short */
#include <stdio.h>

void maxSumSlidingWindow(int arr[], int n, int k) {
    // Check if k is larger than the size of the array
    if (k > n) {
        printf("Invalid\n");
        return;
    }

    // Calculate the sum of the first window of size k
    int max_sum = 0, window_sum = 0;
    for (int i = 0; i < k; i++) {
        window_sum += arr[i];
    }

    max_sum = window_sum;  // Initialize max_sum with the sum of the first window

    // Slide the window over the rest of the array
    for (int i = k; i < n; i++) {
        // Slide the window by subtracting the element leaving the window
        // and adding the element entering the window
        window_sum = window_sum - arr[i - k] + arr[i];
       
        // Update max_sum if the new window sum is greater
        if (window_sum > max_sum) {
            max_sum = window_sum;
        }
    }

    printf("%d\n", max_sum);  // Print the maximum sum
}

int main() {
    int arr1[] = {100, 200, 300, 400};
    int k1 = 2;
    int n1 = sizeof(arr1) / sizeof(arr1[0]);
    maxSumSlidingWindow(arr1, n1, k1);  // Output: 700

    int arr2[] = {1, 4, 2, 10, 23, 3, 1, 0, 20};
    int k2 = 4;
    int n2 = sizeof(arr2) / sizeof(arr2[0]);
    maxSumSlidingWindow(arr2, n2, k2);  // Output: 39

    int arr3[] = {2, 3};
    int k3 = 3;
    int n3 = sizeof(arr3) / sizeof(arr3[0]);
    maxSumSlidingWindow(arr3, n3, k3);  // Output: Invalid

    return 0;
}
/* 9 You are given an array of prices where prices[i] is the price of a given stock on an ith day. You
want to maximize your profit by choosing a single day to buy one stock and choosing a
different day in the future to sell that stock. Return the maximum profit you can achieve from
this transaction. If you cannot achieve any profit, return 0*/
#include <stdio.h>

int maxProfit(int prices[], int n) {
    if (n == 0) return 0; // No prices, no profit
   
    int min_price = prices[0];  // Initialize min_price with the first price
    int max_profit = 0;         // Initialize max_profit to 0
   
    // Traverse through the price array
    for (int i = 1; i < n; i++) {
        // Calculate the current profit if selling at prices[i]
        int profit = prices[i] - min_price;
       
        // Update max_profit if the current profit is greater
        if (profit > max_profit) {
            max_profit = profit;
        }
       
        // Update min_price if we find a lower price
        if (prices[i] < min_price) {
            min_price = prices[i];
        }
    }

    return max_profit;  // Return the maximum profit found
}

int main() {
    int prices[] = {7, 1, 5, 3, 6, 4};
    int n = sizeof(prices) / sizeof(prices[0]);
   
    int result = maxProfit(prices, n);
    printf("%d\n", result);  // Output: 5 (Buy at 1 and sell at 6)

    return 0;
}
/* 10 Given an integer array, find the maximum length subarray having a given sum.(USE
HASHMAP Concept)*/
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Structure for Hashmap Entry (key, value pair)
typedef struct {
    int key;
    int value;
} HashmapEntry;

// Hashmap structure
typedef struct {
    HashmapEntry* entries;
    int size;
} Hashmap;

// Function to initialize a hashmap
void initHashmap(Hashmap* hashmap, int capacity) {
    hashmap->size = 0;
    hashmap->entries = (HashmapEntry*)malloc(capacity * sizeof(HashmapEntry));
}

// Function to insert or update a key-value pair in the hashmap
void insert(Hashmap* hashmap, int key, int value) {
    for (int i = 0; i < hashmap->size; i++) {
        if (hashmap->entries[i].key == key) {
            hashmap->entries[i].value = value;
            return;
        }
    }
    hashmap->entries[hashmap->size].key = key;
    hashmap->entries[hashmap->size].value = value;
    hashmap->size++;
}

// Function to get the value for a key from the hashmap, returns -1 if key is not found
int get(Hashmap* hashmap, int key) {
    for (int i = 0; i < hashmap->size; i++) {
        if (hashmap->entries[i].key == key) {
            return hashmap->entries[i].value;
        }
    }
    return -1; // Not found
}

// Function to find the maximum length subarray with the given sum
void maxSubarrayWithSum(int nums[], int n, int target) {
    Hashmap hashmap;
    initHashmap(&hashmap, n);

    int sum = 0;
    int maxLength = 0;
    int startIndex = -1;  // To store the starting index of the longest subarray
    insert(&hashmap, 0, -1);  // To handle the case when the sum of elements from index 0 is the target

    // Traverse the array
    for (int i = 0; i < n; i++) {
        sum += nums[i];

        // Check if the sum minus target has appeared before
        int prevIndex = get(&hashmap, sum - target);

        if (prevIndex != -1) {
            int length = i - prevIndex;
            if (length > maxLength) {
                maxLength = length;
                startIndex = prevIndex + 1;
            }
        }

        // Insert the current sum if it is not already in the hashmap
        if (get(&hashmap, sum) == -1) {
            insert(&hashmap, sum, i);
        }
    }

    // Print the longest subarray
    if (maxLength > 0) {
        printf("Longest subarray with sum %d: { ", target);
        for (int i = startIndex; i < startIndex + maxLength; i++) {
            printf("%d ", nums[i]);
        }
        printf("}\n");
    } else {
        printf("No subarray with the given sum found.\n");
    }

    // Free the hashmap memory
    free(hashmap.entries);
}

int main() {
    int nums[] = {5, 6, -5, 5, 3, 5, 3, -2, 0};
    int target = 8;
    int n = sizeof(nums) / sizeof(nums[0]);
   
    maxSubarrayWithSum(nums, n, target);

    return 0;
}
